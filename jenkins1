properties([
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '10')),
    parameters([
        choice(name: 'GCP_PROJECT_ID', choices: ['hsbc-12609073-peakplatuat-dev', 'project2', 'project3'], defaultValue: 'hsbc-12609073-peakplatuat-dev', description: 'Google Cloud Project'),
        string(name: 'BUILD_SA', defaultValue: 'automation-deployment', description: 'GCP Service Account', trim: true),
        string(name: 'ENVIRONMENT', defaultValue: 'DEV', description: 'GCP Project Environment', trim: true),
        choice(name: 'TF_MODULE', choices: ['CR-Automation-Servicenow-API', 'module2', 'module3'], defaultValue: 'CR-Automation-Servicenow-API', description: 'Terraform Module Location'),
        choice(name: 'GCP_REGION', choices: ['us-central1', 'us-east1', 'us-west1'], defaultValue: 'us-central1', description: 'GCP Region'),
        choice(name: 'TF_ACTION', choices: ['plan', 'apply', 'destroy'], defaultValue: 'plan', description: 'Terraform Action'),
        booleanParam(name: 'SKIP_CP_CHECK', defaultValue: false, description: 'Skip CR Approval Check')
    ])
])

def PIPELINE_ID = "pipeline-" + UUID.randomUUID().toString()
def GCP_SA_KEY_ID = "${params.BUILD_SA}_${params.GCP_PROJECT_ID}"

pipeline {
    agent { label "gcp-bffpeak-jenkins-slave" }

    environment {
        SERVICENOW_INSTANCE = "https://hsbcitidu.service-now.com/servicenow"
        terraform_provider_home = "/hsbc/terraform_provider"
    }

    stages {
        stage('Check Repo Subdirectories') {
            steps {
                script {
                    echo "Checking if 'gcp_projects' and 'modules' directories exist in Git..."
                    sh "git ls-tree -r HEAD --name-only | grep -E '^(gcp_projects|modules)/' || echo 'Directories missing or not committed'"
                }
            }
        }

        stage('Setup & Terraform Execution') {
            steps {
                script {
                    try {
                        def WORKSPACE_DIR = "${env.WORKSPACE}/${PIPELINE_ID}"
                        def tfVarsFile = "${params.ENVIRONMENT}.tfvars"

                        withCredentials([file(credentialsId: "${GCP_SA_KEY_ID}", variable: 'GCP_SA_KEY_FILE')]) {
                            withCredentials([file(credentialsId: 'NETRC_CONFIG', variable: 'NETRC_CONFIG_FILE')]) {
                                sh """
                                    mkdir -p /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API
                                    cp /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/secret-sa.json /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/
                                    chmod 700 /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/secret-sa.json
                                    cp /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/.netrc /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/
                                    chmod 700 /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/.netrc
                                    cp /hsbc/terraform_provider/.netrc /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/
                                    chmod 700 /hsbc/terraform_provider/.netrc
                                    cp -r modules/servicenow_cr/* /build/workspace/Finance_IT/BFF/peak-devops-tools/CR-Automation-Servicenow-API/pipeline-beee56d7-3248-4420-abb4-42f4eef0fbf7/CR-Automation-Servicenow-API/
                                """

                                dir("${WORKSPACE_DIR}/${params.TF_MODULE}") {
                                    withEnv([
                                        "GOOGLE_APPLICATION_CREDENTIALS=${WORKSPACE_DIR}/secret-sa.json",
                                        "HOME=${terraform_provider_home}",
                                        "HTTP_PROXY=http://googleapis-dev.gcp.cloud.uk.hsbc:3128",
                                        "HTTPS_PROXY=http://googleapis-dev.gcp.cloud.uk.hsbc:3128",
                                        "NO_PROXY=.hsbc"
                                    ]) {
                                        if (params.TF_MODULE == "tfstate-bucket") {
                                            echo "Using local tfstate for module: ${params.TF_MODULE}"
                                            sh 'terraform init -upgrade=false -no-color'
                                        } else {
                                            sh """
                                                sed -i 's/.local./backend "gcs" {}/' backend.tf
                                                terraform init -no-color -force-copy -get=true -lock=true -input=false -backend=true \
                                                    -backend-config="bucket=${params.GCP_PROJECT_ID}-${params.GCP_REGION}-terraform" \
                                                    -backend-config="prefix=terraform-${params.TF_MODULE}-${params.ENVIRONMENT}"
                                            """
                                        }

                                        sh 'terraform validate -no-color'
                                        sh "terraform workspace select ${params.ENVIRONMENT} 2>/dev/null || terraform workspace new ${params.ENVIRONMENT}"

                                        if (params.TF_ACTION == "apply") {
                                            sh "terraform apply -auto-approve -no-color -var-file=${tfVarsFile} -var project_id=${params.GCP_PROJECT_ID}"
                                        } else if (params.TF_ACTION == "plan") {
                                            sh "terraform plan -out=tfplan -no-color -var-file=${tfVarsFile} -var project_id=${params.GCP_PROJECT_ID}"
                                        } else {
                                            sh "terraform destroy -auto-approve -no-color -var-file=${tfVarsFile} -var project_id=${params.GCP_PROJECT_ID}"
                                        }

                                        env.CR_ID = sh(script: "terraform output -raw cr_id", returnStdout: true).trim()
                                        echo "Captured CR ID: ${env.CR_ID}"
                                        echo "CR ID to be checked: ${env.CR_ID}"
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error occurred: ${e}")
                    } finally {
                        sh "rm -rf ${env.WORKSPACE}/${PIPELINE_ID}"
                    }
                }
            }
        }

        stage('Debug Info') {
            steps {
                script {
                    echo "Current working directory: ${pwd()}"
                }
                sh 'ls -l'
                sh "ls -l ${env.WORKSPACE}/${PIPELINE_ID}"
            }
        }

        stage('Check CR Approval & Notify') {
            when {
                allOf {
                    expression { return !params.SKIP_CP_CHECK }
                    expression { return env.CR_ID?.trim() }
                }
            }
            steps {
                script {
                    echo "CR ID to be checked: ${env.CR_ID}"
                    withCredentials([usernamePassword(
                        credentialsId: 'servicenow-api-basic',
                        usernameVariable: 'SNOW_USER',
                        passwordVariable: 'SNOW_PASS'
                    )]) {
                        def crStatus = sh(
                            script: "curl -s -u '${SNOW_USER}:${SNOW_PASS}' " +
                                    "-X GET '${SERVICENOW_INSTANCE}/api/now/table/change_request/${env.CR_ID}' " +
                                    "| jq -r '.result.state'",
                            returnStdout: true
                        ).trim()

                        echo "CR Status: ${crStatus}"

                        if (crStatus == "approved") {
                            emailext(
                                subject: "Change Request ${env.CR_ID} Approved",
                                body: """
                                    Hello Team,<br><br>
                                    The Change Request <b>${env.CR_ID}</b> has been <b>approved</b>.<br>
                                    Please proceed with the deployment.<br><br>
                                    Regards,<br>
                                    DevOps Team
                                """,
                                mimeType: 'text/html',
                                to: 'uma.rao@noexternalmail.hsbc.com'
                            )
                        } else {
                            echo "CR not approved yet!"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
