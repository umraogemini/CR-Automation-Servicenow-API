properties([
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '10')),
    parameters([
        choice(name: 'GCP_PROJECT_ID', choices: ['hsbc-12609073-peakplatuat-dev', 'project2', 'project3'], defaultValue: 'hsbc-12609073-peakplatuat-dev', description: 'Google Cloud Project'),
        string(name: 'BUILD_SA', defaultValue: 'automation-deployment', description: 'GCP Service Account', trim: true),
        string(name: 'ENVIRONMENT', defaultValue: 'DEV', description: 'GCP Project Environment', trim: true),
        choice(name: 'TF_MODULE', choices: ['CR-Automation-Servicenow-API'], defaultValue: 'CR-Automation-Servicenow-API', description: 'Terraform Module Location'),
        choice(name: 'GCP_REGION', choices: ['us-central1'], defaultValue: 'us-central1', description: 'GCP Region'),
        choice(name: 'TF_ACTION', choices: ['apply', 'plan', 'destroy'], defaultValue: 'apply', description: 'Terraform Action'),
        booleanParam(name: 'SKIP_CP_CHECK', defaultValue: false, description: 'Skip CR Approval Check')
    ])
])

def PIPELINE_ID = "pipeline-" + UUID.randomUUID().toString()
def GCP_SA_KEY_ID = "${params.BUILD_SA}_${params.GCP_PROJECT_ID}"

pipeline {
    agent { label "gcp-bffpeak-jenkins-slave" }

    environment {
        SERVICENOW_INSTANCE = "https://hsbcitidu.service-now.com/servicenow"
        terraform_provider_home = "/hsbc/terraform_provider"
    }

    stages {
        stage('Terraform Execution') {
            steps {
                script {
                    try {
                        def WORKSPACE_DIR = "${env.WORKSPACE}/${PIPELINE_ID}"
                        def tfVarsFile = "terraform.tfvars"

                        withCredentials([file(credentialsId: "${GCP_SA_KEY_ID}", variable: 'GCP_SA_KEY_FILE'),
                                         usernamePassword(credentialsId: 'servicenow-api-basic', usernameVariable: 'SNOW_USER', passwordVariable: 'SNOW_PASS')]) {

                            sh """
                                mkdir -p ${WORKSPACE_DIR}
                                cp -r . ${WORKSPACE_DIR}
                                cp ${GCP_SA_KEY_FILE} ${WORKSPACE_DIR}/secret-sa.json && chmod 700 ${WORKSPACE_DIR}/secret-sa.json
                            """

                            dir("${WORKSPACE_DIR}") {
                                withEnv([
                                    "GOOGLE_APPLICATION_CREDENTIALS=${WORKSPACE_DIR}/secret-sa.json",
                                    "HOME=${terraform_provider_home}",
                                    "TF_VAR_servicenow_username=${SNOW_USER}",
                                    "TF_VAR_servicenow_password=${SNOW_PASS}"
                                ]) {
                                    sh 'terraform init -upgrade=false -no-color'
                                    sh 'terraform validate -no-color'

                                    if (params.TF_ACTION == "apply") {
                                        sh "terraform apply -auto-approve -no-color -var-file=${tfVarsFile}"
                                    } else if (params.TF_ACTION == "plan") {
                                        sh "terraform plan -out=tfplan -no-color -var-file=${tfVarsFile}"
                                    } else {
                                        sh "terraform destroy -auto-approve -no-color -var-file=${tfVarsFile}"
                                    }

                                    env.CR_ID = sh(script: "terraform output -raw cr_id", returnStdout: true).trim()
                                    echo "Captured CR ID: ${env.CR_ID}"
                                }
                            }
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error occurred: ${e}")
                    } finally {
                        sh "rm -rf ${env.WORKSPACE}/${PIPELINE_ID}"
                    }
                }
            }
        }

        stage('Check CR Approval & Notify') {
            when {
                allOf {
                    expression { return !params.SKIP_CP_CHECK }
                    expression { return env.CR_ID?.trim() }
                }
            }
            steps {
                script {
                    echo "CR ID to be checked: ${env.CR_ID}"
                    withCredentials([usernamePassword(
                        credentialsId: 'servicenow-api-basic',
                        usernameVariable: 'SNOW_USER',
                        passwordVariable: 'SNOW_PASS'
                    )]) {
                        def crStatus = sh(
                            script: "curl -s -u '${SNOW_USER}:${SNOW_PASS}' " +
                                    "-X GET '${SERVICENOW_INSTANCE}/api/now/table/change_request/${env.CR_ID}' " +
                                    "| jq -r '.result.state'",
                            returnStdout: true
                        ).trim()

                        echo "CR Status: ${crStatus}"

                        if (crStatus == "approved") {
                            emailext(
                                subject: "Change Request ${env.CR_ID} Approved",
                                body: """
                                    Hello Team,<br><br>
                                    The Change Request <b>${env.CR_ID}</b> has been <b>approved</b>.<br>
                                    Please proceed with the deployment.<br><br>
                                    Regards,<br>
                                    DevOps Team
                                """,
                                mimeType: 'text/html',
                                to: 'uma.rao@noexternalmail.hsbc.com'
                            )
                        } else {
                            echo "CR not approved yet!"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
